{"ast":null,"code":"import { useCartesianContext } from '../context/CartesianProvider';\nimport { isBandScale } from '../internals/isBandScale';\n/**\n * For a given scale return a function that map value to their position.\n * Useful when dealing with specific scale such as band.\n * @param scale The scale to use\n * @returns (value: any) => number\n */\nexport function getValueToPositionMapper(scale) {\n  if (isBandScale(scale)) {\n    return value => scale(value) + scale.bandwidth() / 2;\n  }\n  return value => scale(value);\n}\nexport function useXScale(identifier) {\n  const {\n    xAxis,\n    xAxisIds\n  } = useCartesianContext();\n  const id = typeof identifier === 'string' ? identifier : xAxisIds[identifier ?? 0];\n  return xAxis[id].scale;\n}\nexport function useYScale(identifier) {\n  const {\n    yAxis,\n    yAxisIds\n  } = useCartesianContext();\n  const id = typeof identifier === 'string' ? identifier : yAxisIds[identifier ?? 0];\n  return yAxis[id].scale;\n}","map":{"version":3,"names":["useCartesianContext","isBandScale","getValueToPositionMapper","scale","value","bandwidth","useXScale","identifier","xAxis","xAxisIds","id","useYScale","yAxis","yAxisIds"],"sources":["C:/Users/lyont/GithubProfile/backendstesting/LET-FrontEnd/node_modules/@mui/x-charts/esm/hooks/useScale.js"],"sourcesContent":["import { useCartesianContext } from '../context/CartesianProvider';\nimport { isBandScale } from '../internals/isBandScale';\n/**\n * For a given scale return a function that map value to their position.\n * Useful when dealing with specific scale such as band.\n * @param scale The scale to use\n * @returns (value: any) => number\n */\nexport function getValueToPositionMapper(scale) {\n  if (isBandScale(scale)) {\n    return value => scale(value) + scale.bandwidth() / 2;\n  }\n  return value => scale(value);\n}\nexport function useXScale(identifier) {\n  const {\n    xAxis,\n    xAxisIds\n  } = useCartesianContext();\n  const id = typeof identifier === 'string' ? identifier : xAxisIds[identifier ?? 0];\n  return xAxis[id].scale;\n}\nexport function useYScale(identifier) {\n  const {\n    yAxis,\n    yAxisIds\n  } = useCartesianContext();\n  const id = typeof identifier === 'string' ? identifier : yAxisIds[identifier ?? 0];\n  return yAxis[id].scale;\n}"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,8BAA8B;AAClE,SAASC,WAAW,QAAQ,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,KAAK,EAAE;EAC9C,IAAIF,WAAW,CAACE,KAAK,CAAC,EAAE;IACtB,OAAOC,KAAK,IAAID,KAAK,CAACC,KAAK,CAAC,GAAGD,KAAK,CAACE,SAAS,CAAC,CAAC,GAAG,CAAC;EACtD;EACA,OAAOD,KAAK,IAAID,KAAK,CAACC,KAAK,CAAC;AAC9B;AACA,OAAO,SAASE,SAASA,CAACC,UAAU,EAAE;EACpC,MAAM;IACJC,KAAK;IACLC;EACF,CAAC,GAAGT,mBAAmB,CAAC,CAAC;EACzB,MAAMU,EAAE,GAAG,OAAOH,UAAU,KAAK,QAAQ,GAAGA,UAAU,GAAGE,QAAQ,CAACF,UAAU,IAAI,CAAC,CAAC;EAClF,OAAOC,KAAK,CAACE,EAAE,CAAC,CAACP,KAAK;AACxB;AACA,OAAO,SAASQ,SAASA,CAACJ,UAAU,EAAE;EACpC,MAAM;IACJK,KAAK;IACLC;EACF,CAAC,GAAGb,mBAAmB,CAAC,CAAC;EACzB,MAAMU,EAAE,GAAG,OAAOH,UAAU,KAAK,QAAQ,GAAGA,UAAU,GAAGM,QAAQ,CAACN,UAAU,IAAI,CAAC,CAAC;EAClF,OAAOK,KAAK,CAACF,EAAE,CAAC,CAACP,KAAK;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}